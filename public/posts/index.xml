<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on phx.io</title>
    <link>http://phx.io/posts/</link>
    <description>Recent content in Posts on phx.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Apr 2016 11:30:14 -0700</lastBuildDate>
    <atom:link href="http://phx.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Accessing Internal Services</title>
      <link>http://phx.io/posts/internal-services/</link>
      <pubDate>Sun, 24 Apr 2016 11:30:14 -0700</pubDate>
      
      <guid>http://phx.io/posts/internal-services/</guid>
      <description>

&lt;p&gt;&lt;em&gt;TLDR: Teams need to have the ability to deploy and access internal services easily.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the days before microservices, teams lived in the &amp;ldquo;Admin Section&amp;rdquo; of an app. It was the dumping ground for all functionality used the team that they didn&amp;rsquo;t want users to see.&lt;/p&gt;

&lt;p&gt;These days, that admin section should be a small constellation of microservices, focused entirely of functionality the developers and admins use to configure and  monitor the cluster. Additionally, it&amp;rsquo;s not uncommon for apps to expose separate endpoints that expose stats or a simple API.&lt;/p&gt;

&lt;p&gt;Accessing those internal services becomes critical. Teams might be tempted to resort to HTTP only, password protected APIs exposed on their public IPs. This is a security nightmare and should be discounted as soon as possible. Those internal APIs are never given the same security considerations as the public.&lt;/p&gt;

&lt;p&gt;Mapping internal services to external, public ports also becomes an administrative headache. Every service needs a new port and keeping tracking of that port mapping and who is using which one (and thusly which ones need to be active) spirals out of control quickly.&lt;/p&gt;

&lt;h3 id=&#34;providing-access:1773bf4204a73b347900c2be805e78dc&#34;&gt;Providing Access&lt;/h3&gt;

&lt;h4 id=&#34;vpn:1773bf4204a73b347900c2be805e78dc&#34;&gt;VPN&lt;/h4&gt;

&lt;p&gt;One of the easiest ways to solve this problem is to provide a VPN connection that developers can use to obtain access the internal cluster network, so that they may access the internal services.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re on a office network, perhaps even that office network is setup to allow routed traffic to your production network. If you already have this, great. But I actually don&amp;rsquo;t recommend setting this up. It makes it much harder to track who has access to the internal services and it&amp;rsquo;s possible you don&amp;rsquo;t want everyone on that network to access them. Additionally, when developers aren&amp;rsquo;t on that office network, they need another solution to access those resources anyway. For that reason, start and end with a good client VPN solution. Treat your office network like it&amp;rsquo;s the wifi at a coffee shop.&lt;/p&gt;

&lt;p&gt;There are many VPN solutions, scaling up in depending on your needs. Everything from &lt;a href=&#34;https://help.ubuntu.com/community/SSH_VPN&#34;&gt;using a recent ssh&amp;rsquo;s native interface tunnel&lt;/a&gt; to &lt;a href=&#34;https://openvpn.net&#34;&gt;OpenVPN&lt;/a&gt; and up to commercial VPN appliances.&lt;/p&gt;

&lt;p&gt;One solution that I stumbled upon and have been using more and more is &lt;a href=&#34;https://www.zerotier.com&#34;&gt;ZeroTier&lt;/a&gt;. It&amp;rsquo;s a peer-to-peer VPN which makes it more flexible (for instance to allow access to services provided by other clients) and the configuration is dead simple. They recently bumped up their free accounts to allow 100 devices and for $29.99 you can have unlimited devices. The client is &lt;a href=&#34;https://github.com/zerotier/ZeroTierOne/&#34;&gt;open source&lt;/a&gt; so what you&amp;rsquo;re paying for is the convenience of using their cloud controller. But with the free accounts now allowing 100 devices, it&amp;rsquo;s easy to see that everyone but large companies could use the service free!&lt;/p&gt;

&lt;p&gt;ZeroTier also provides a public API to allow querying which devices are online and their connection information, making it easy to incorporate DNS and auditing systems. The client also has a local API that can be used control it. This makes it also easy to debug and script against, depending on needs.&lt;/p&gt;

&lt;p&gt;Basically, ZeroTier is the ultimate power user VPN.&lt;/p&gt;

&lt;h4 id=&#34;tunneling:1773bf4204a73b347900c2be805e78dc&#34;&gt;Tunneling&lt;/h4&gt;

&lt;p&gt;Another mechanism that can be used is programmatic tunneling. The best example of this is kubernetes &lt;a href=&#34;http://kubernetes.io/docs/user-guide/kubectl/kubectl_port-forward/&#34;&gt;&lt;code&gt;kubectl port-forward&lt;/code&gt;&lt;/a&gt;. This mechanism creates a tunnel and binds a local port to access a service running within a kubernetes Pod.&lt;/p&gt;

&lt;p&gt;When a user needs to access a service, they simple run the right incantation of &lt;code&gt;kubectl port-forward&lt;/code&gt; and then access the bound port. The traffic is tunnel over the kubernetes api service running within the cluster.&lt;/p&gt;

&lt;p&gt;There is a big limitation with &lt;code&gt;kubectl port-forward&lt;/code&gt; though. It can&amp;rsquo;t access services, only pods. This means that the name of the thing to bind to is unstable (because pod names are usually transient, based upon the name of the replicated controller). So to use &lt;code&gt;kubectl port-forward&lt;/code&gt; with any regularity, users have to script translating from a replicated controller or service to a pod, then invoke &lt;code&gt;kubectl port-forward&lt;/code&gt;. I hope that in the future, this functionality is built directly in, it would vastly improve the usefulness.&lt;/p&gt;

&lt;h3 id=&#34;directory:1773bf4204a73b347900c2be805e78dc&#34;&gt;Directory&lt;/h3&gt;

&lt;p&gt;The number of revelation behind deploying microservices is that it&amp;rsquo;s easy to lose track of them. With dynamic scheduling and replicas, what is running where becomes a task that a computer should be tracking, not a human.&lt;/p&gt;

&lt;p&gt;This directory of services becomes important when developers want to use these internal services. Hunting around for random IP address / port combos is a great way to loose a day and then accidentally use the wrong service all together.&lt;/p&gt;

&lt;p&gt;This directory concept directly fits in with my &lt;a href=&#34;http://phx.io/posts/microservice-dev/&#34;&gt;previous post about bridging the gap between local and remote services&lt;/a&gt;. In this case though what is needed is basically an internal portal, listing the services and provide links to the internal HTTP ones. This concept is already done by larger engineering organizations but rarely makes it way down. Every team doing microservices, whether it&amp;rsquo;s a one person operation or Google itself, needs this functionality.&lt;/p&gt;

&lt;h3 id=&#34;case-study:1773bf4204a73b347900c2be805e78dc&#34;&gt;Case Study: Kubernetes + ZeroTier&lt;/h3&gt;

&lt;p&gt;I want to detail the setup that I currently use which is working fantastically, not only for developer access, but also to bridge services between clusters.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The names of the services/clusters have been changed to protect the innocent&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-players:1773bf4204a73b347900c2be805e78dc&#34;&gt;The players&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Cluster W, running:

&lt;ul&gt;
&lt;li&gt;Reader&lt;/li&gt;
&lt;li&gt;Purge&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cluster M, running:

&lt;ul&gt;
&lt;li&gt;Members&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Developer machine Z&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both clusters are running kubernetes and there are associated replicated controllers and services for each of the above apps.&lt;/p&gt;

&lt;h5 id=&#34;installation:1773bf4204a73b347900c2be805e78dc&#34;&gt;Installation&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;We need a ZeroTier network. Login and create one, giving it whatever name.&lt;/li&gt;
&lt;li&gt;Install the ZeroTier clients on the master instances of W and M, but not the minions.&lt;/li&gt;
&lt;li&gt;Add the master instances ZeroTier clients to your previously created network.&lt;/li&gt;
&lt;li&gt;Configure the master instances to run &lt;code&gt;kube-proxy&lt;/code&gt;. This means that the masters are now aware of all services in the cluster and can route traffic to the minions based on those services.&lt;/li&gt;
&lt;li&gt;Install ZeroTier on Z and add it to the ZeroTier network.&lt;/li&gt;
&lt;li&gt;At this point, you should have connectivity from Z to both W and M. The ZeroTier UI will show you the IP address that they&amp;rsquo;ve been assigned and you should be able to ping between them.

&lt;ul&gt;
&lt;li&gt;If you can&amp;rsquo;t then it&amp;rsquo;s likely that there are firewalls blocking traffic getting to W and M.&lt;/li&gt;
&lt;li&gt;Alter the firewall (for instance, in AWS, change the security group) to allow UDP port 9993.&lt;/li&gt;
&lt;li&gt;You should now have connectivity.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Z can now access any service provided by clusters W and M that use &lt;a href=&#34;http://kubernetes.io/docs/user-guide/services/#type-nodeport&#34;&gt;NodePort&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because ZeroTier provides a Point-to-Point VPN, the Readers service now has access to Members on M. But because the traffic has to flow through the master, you need to add an IP route so that traffic for the ip subnet used by ZeroTier is sent to the master. On AWS, this is done by adding a route to your VPC.&lt;/p&gt;

&lt;h5 id=&#34;directory-1:1773bf4204a73b347900c2be805e78dc&#34;&gt;Directory&lt;/h5&gt;

&lt;p&gt;To do basic dynamic configuration, the ZeroTier API is queried for devices and their assigned name is added to a special &lt;code&gt;int.blah.com&lt;/code&gt; domain. That allows for device to easily access the other nodes by name rather than auto-assigned IP.&lt;/p&gt;

&lt;p&gt;For the apps running inside the Kubernetes cluster, those are assigned ports and tracked by Kubernetes itself. There is a simple script that can resolve the node port assigned to a service from it&amp;rsquo;s name. Because these ports are stable, they can be put into configuration files safely.&lt;/p&gt;

&lt;h5 id=&#34;day-to-day:1773bf4204a73b347900c2be805e78dc&#34;&gt;Day to day&lt;/h5&gt;

&lt;p&gt;From Z, it&amp;rsquo;s possible to access the Members service simply by doing &lt;code&gt;curl w.int.blah.com:$(resolve m members)&lt;/code&gt;, where &lt;code&gt;resolve&lt;/code&gt; is a simple script that translates the cluster name and service into a port number.&lt;/p&gt;

&lt;p&gt;Reader can use the same addressing mechanism to access Members as well.&lt;/p&gt;

&lt;h3 id=&#34;summary:1773bf4204a73b347900c2be805e78dc&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Internal services are backbone of a microservices architecture. They provide the most important functionality and accessing them is critical. Provide secure and consistent access to removes stumbling blocks, keeping everything moving.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microservice Development - Who Runs What Where</title>
      <link>http://phx.io/posts/microservice-dev/</link>
      <pubDate>Sun, 17 Apr 2016 20:25:13 -0700</pubDate>
      
      <guid>http://phx.io/posts/microservice-dev/</guid>
      <description>

&lt;p&gt;&lt;em&gt;TLDR: The industry needs a common set of practices for how to develop microservices. This post discusses the required features those practices provide.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Microservices!&amp;rdquo; she shouted, exclaiming what a brave, new world we were
living in.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;No more monoliths! Code bases so small you can fit them in the palm of your hand!&amp;rdquo;. The dream was surely alive.&lt;/p&gt;

&lt;p&gt;But as quickly as the exuberance of a new development paradigm set in, the
trouble began.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Now instead of running one app to develop a feature, I need to have access to 5 different, coordinating services!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Everyone that is doing microservices has this question. How this question is answered is as varied as there are teams. And so I posed the question on twitter:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I’d love to hear how people developing services manage their dev environment for those services. Run everything locally? Nothing locally?&lt;/p&gt;&amp;mdash; Evan Phoenix (@evanphx) &lt;a href=&#34;https://twitter.com/evanphx/status/721499732665720832&#34;&gt;April 17, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

The responses started to roll in:

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/evanphx&#34;&gt;@evanphx&lt;/a&gt; we usually run the service you&amp;#39;re coding on locally, and run service dependencies in a shared sandbox environment.&lt;/p&gt;&amp;mdash; Evan Owen (@kainosnoema) &lt;a href=&#34;https://twitter.com/kainosnoema/status/721501519523098624&#34;&gt;April 17, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/evanphx&#34;&gt;@evanphx&lt;/a&gt; Everything locally in separate VMs (if there are dependencies) created from provisioning scripts and mock data.&lt;/p&gt;&amp;mdash; Patrick Lenz (@patricklenz) &lt;a href=&#34;https://twitter.com/patricklenz/status/721574452677472256&#34;&gt;April 17, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/evanphx&#34;&gt;@evanphx&lt;/a&gt; we run everything locally.&lt;/p&gt;&amp;mdash; Mike Chlipala (@mikec) &lt;a href=&#34;https://twitter.com/mikec/status/721504251407519744&#34;&gt;April 17, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/evanphx&#34;&gt;@evanphx&lt;/a&gt; Run everything locally. Don’t test locally though. For testing (incl. performance) hit test services which mirror prod, not staging&lt;/p&gt;&amp;mdash; Jeremy Tregunna (@jtregunna) &lt;a href=&#34;https://twitter.com/jtregunna/status/721500756294115328&#34;&gt;April 17, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/evanphx&#34;&gt;@evanphx&lt;/a&gt; we run only the service under development locally. Dependencies are run in a sandbox on our PaaS (Cloud Foundry in our case)&lt;/p&gt;&amp;mdash; Bruce E. Thelen (@brucethelen) &lt;a href=&#34;https://twitter.com/brucethelen/status/721668455074672640&#34;&gt;April 17, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;There seem to be 2 schools represented:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run everything locally

&lt;ol&gt;
&lt;li&gt;in VMs&lt;/li&gt;
&lt;li&gt;in containers&lt;/li&gt;
&lt;li&gt;as regular programs&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Run only one service locally, the rest in a remote sandbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;d imagine that the second case is a reaction to the complicated nature of managing the first. If 5 different services are required to do development, a developer can easily lose a week just trying to get everything setup. VMs and containers can certainly help, and help a lot, but they still put heavy resource constraints upon a single machine.&lt;/p&gt;

&lt;p&gt;What microservice development needs as a mainstream strategy that can unify these 2 approaches so that developers can easily flow between them based on ease of use. Namely, these are the necessary features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability for multiple services running locally to find each other&lt;/li&gt;
&lt;li&gt;Ability for local services to use remote ones&lt;/li&gt;
&lt;li&gt;Ability for local services to give out a url/address for themselves that remote services can use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some features that I think would make such a tool/strategy even better:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A monitor that can report on traffic flowing between services

&lt;ul&gt;
&lt;li&gt;Could even include the full data stream, ala ngrok&amp;rsquo;s HTTP monitor support&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Local log aggregation&lt;/li&gt;
&lt;li&gt;Ability to easily rebuild and restart one service without disrupting other local services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s breakdown these features:&lt;/p&gt;

&lt;h3 id=&#34;multiple-local-services:50183f3ba3951ac22d67599b7a373629&#34;&gt;Multiple Local Services&lt;/h3&gt;

&lt;p&gt;The easiest way do this is static port mappings. Service A always runs on 20001, B on 20002, etc. You can get a long ways doing this, but obviously it breaks down in B is now being run remotely instead of locally. In that case, port 20002 needs to run some kind of proxy that can route traffic to B.&lt;/p&gt;

&lt;p&gt;One upside of static port mappings is that it simplifies internal service discovery. Rather than needing to be coded with a specific dynamic discovery strategy (DNS, Consul, etcd, etc), a simple config file or even static configuration can be used.&lt;/p&gt;

&lt;p&gt;A place where static port mappings breaks down badly is when 2 versions of a service need be used. Reverting locally changes to a service to fix an unrelated bug is a huge productivity killer. For that reason, some level of dynamic configuration is preferable. It doesn&amp;rsquo;t have to be runtime dynamic, for instance environment variable inject counts as dynamic in this context.&lt;/p&gt;

&lt;h3 id=&#34;dynamic-service-configuration:50183f3ba3951ac22d67599b7a373629&#34;&gt;Dynamic Service Configuration&lt;/h3&gt;

&lt;p&gt;There are 2 elements to dynamic service configuration that we should discuss.&lt;/p&gt;

&lt;p&gt;First is what details about a service are advertised and how the systems knows that info. For all local services, that could be a simple config file or a trivial local database where services register themselves. When you add remote services into the mix as well, something like Consul, etcd, or even Kubernetes can be queried. The key here is that a program running on the local machine can answer based on local values as well as remote ones.&lt;/p&gt;

&lt;p&gt;The second part is how service information is consumed. Simplest is environment variable injection. To find service B, simply read &lt;code&gt;SERVICE_B_ADDRESS&lt;/code&gt;. This is a tried and true solution, and gives services a high degree of flexibility with regard to how they integrate that information into their local config. But environment variables have a huge downside: they can only be set at program start. That means that all services must be known and assigned some static value before any program starts up.&lt;/p&gt;

&lt;p&gt;Another common technique is to use DNS to provide service information. Consul is a great example of that, it provides SRV records for services, so that given a name it&amp;rsquo;s possible to get the host and port to connect to. To use DNS service discovery though, either the DNS server that can answer with the service records needs to be in &lt;code&gt;/etc/resolv.conf&lt;/code&gt; or the DNS server needs to queried it directly. The later option is basically bootstrapping DNS based discovery via an environment variable: &lt;code&gt;SERVICE_DNS_ADDRESS&lt;/code&gt; is injected as an environment variable, then queried to provide any further records.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A side note on DNS:&lt;/em&gt; Because we want to allow for dynamic port allocation for added flexibility, a service will likely need to query SRV records, not just an A record, from the DNS server. Because of that &lt;code&gt;gethostbyname&lt;/code&gt; can&amp;rsquo;t be used, even if the DNS server is configured properly via &lt;code&gt;/etc/resolv.conf&lt;/code&gt;. For that reason, it&amp;rsquo;s almost always cleaner to inject the DNS server address via an environment variable rather than fiddle with &lt;code&gt;/etc/resolv.conf&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;connectivity-and-callback-urls:50183f3ba3951ac22d67599b7a373629&#34;&gt;Connectivity and Callback URLs&lt;/h3&gt;

&lt;p&gt;Assuming we&amp;rsquo;ve wired up the above functionality, local services can now find other services, regardless of if they&amp;rsquo;re local or remote. Now the rubber meets the road, services need to connect and send requests to each other. If a service is remote, either there is a VPN pre-configured to allow local service to route to it, or another tool is going to be running locally and providing some kind of proxy. Getting into all of that is a post for another day, so we&amp;rsquo;ll assume that is already setup. What I do want to go over briefly is the requirement that local services can be connected back to. Some will see this requirement as unnecessary, but if you&amp;rsquo;re building asynchronous, HTTP-based services, it&amp;rsquo;s- extremely useful because it means having to run and configure fewer services locally.&lt;/p&gt;

&lt;p&gt;Providing this functionality can be accomplished by integrating functionality similar to &lt;a href=&#34;https://ngrok.com&#34;&gt;ngrok&lt;/a&gt;. Services will need to have a way to find out their external address so they can give it out. That can happen by injecting the information via the same service configuration we used above. So in that way, the callback proxy is just another service that assists in bridging the local/remote gap.&lt;/p&gt;

&lt;h2 id=&#34;additional-features:50183f3ba3951ac22d67599b7a373629&#34;&gt;Additional Features&lt;/h2&gt;

&lt;h3 id=&#34;traffic-monitoring:50183f3ba3951ac22d67599b7a373629&#34;&gt;Traffic Monitoring&lt;/h3&gt;

&lt;p&gt;In development, answering the question &amp;ldquo;what exactly did I just send or receive?&amp;rdquo; is extremely common. So common that it&amp;rsquo;s common for people to just add debugging code do print out these values before being processed. Having a tool that is capturing that data for analysis would be super valuable.&lt;/p&gt;

&lt;h3 id=&#34;local-log-aggregation:50183f3ba3951ac22d67599b7a373629&#34;&gt;Local Log Aggregation&lt;/h3&gt;

&lt;p&gt;If a user is running 3 services locally, seeing the logs for each of them interlaced makes it much easier to understand what is happening. What I think is also important is that this log aggregation isn&amp;rsquo;t the ONLY way to see the logs. It&amp;rsquo;s also very useful to be able to just see the logs for one service without the noise of the others.&lt;/p&gt;

&lt;h3 id=&#34;service-restarts:50183f3ba3951ac22d67599b7a373629&#34;&gt;Service Restarts&lt;/h3&gt;

&lt;p&gt;Programs are going to get restarted really often in development as they change. Relying on frameworks to reload code (such as in Rails) is not a solution to the problem, and so providing the user the ability to stop, rebuild, and start a service without disrupting all the other features here is critical.&lt;/p&gt;

&lt;p&gt;This means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assigned ports must not change between restarts&lt;/li&gt;
&lt;li&gt;Restarting all services to restart one is unacceptable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Development is all about introduce new, iterative versions of services and thusly easy restarting is a critical function.&lt;/p&gt;

&lt;h2 id=&#34;summary:50183f3ba3951ac22d67599b7a373629&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Microservice development is still in it&amp;rsquo;s infancy. Teams are slowly figuring out solutions to their specific problems and largely hacking something together. If microservices are really going to be the future (and some would say the present), then these issues have to be solved.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>